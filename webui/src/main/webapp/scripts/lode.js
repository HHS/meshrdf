/**
 * LODESTAR - Linked Open Data Explorer and SPARQL endpoint
 * Copyright (c) 2013 EMBL - European Bioinformatics Institute
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 *
 * Author: Simon Jupp
 * Year: 2013
 * Contact: jupp [at] ebi.ac.uk
 */


/**
 * global variables
 */
var lodestarResourcePrefix;
var lodestarQueryService;
var lodestarExploreService;
var lodestarResultsPerPage;
var lodestarIslogging;
var lodestarDefaultQuery;
var lodestarVoidQuery;
var lodestarRdfsInference;
var lodestarDefaultResourceImg;
var lodestarDescribeUrl;

var lodestarNamespaces = {};
var lodestarDefaultUriBase;
var tableid = "lodestar-results-table";

var lodestarNextUrl;
var lodestarPrevLink;   // true if 'prev' should be a hyperlink
var lodestarPrevUrl;

var sparqlQueryTextArea;


// Declares a lodestar
(function($) {

    var lodestarDiv = $("<div id='lodestar-main' class='ui-widget ui-corner-all'></div>");
    var contentsDiv = $("<div id='lodestar-contents' class='ui-widget ui-corner-all'></div>");
    var errorDiv = $("<div id='error-div' class='ui-state-error' style='display: none;'/>");
    errorDiv.append($("<p class='alert'>Error: </p>").append($("<span id='error-text'></span>")));

    var appdetails = $("<div id='lodestar-description' class='ui-widget ui-corner-all'/>")
        .append($("<p></p>")
        .append($("<span id='app-details'>Generated by the <a href='http://www.ebi.ac.uk/fgpt/sw/lodestar'>LODEStar</a> linked data browser from the Functional Genomics Production Team (FGPT)</span>")));
    var logginDiv = $('<div style="display: none;" id="lode-log"/>')
    	.append($("<p>Lodestar Log:</p>"))
        .append($("<pre id='logmessage'></pre>"));

    lodestarDiv.append(errorDiv);
    lodestarDiv.append(contentsDiv);
    lodestarDiv.append(appdetails);
    lodestarDiv.append(logginDiv);

    $.fn.explore = function(options) {
        var $this = $(this);
        $this.append(lodestarDiv);
        _parseOptions(options);
        _buildExplorerPage (contentsDiv);
    };

    $.fn.sparql = function(options) {
        var $this = $(this);
        $this.append(lodestarDiv);
        _parseOptions(options);
        _buildSparqlPage (contentsDiv);
        initSparql();
    };

    $.fn.voiddesc = function(options) {
        var $this = $(this);
        _parseOptions(options);
        _buildVoid ($this);
    };
})(jQuery);

function _parseOptions(options) {

    var _options = $.extend({
        'resource_prefix': '/mesh/',
        'servlet_base': 'servlet',
        'query_servlet_name': 'sparql',
        'explore_servlet_name': 'explore',
        'results_per_page' : 50,
        'inference' : true,
        'logging' : false,
        'default_query' : "SELECT DISTINCT ?class\nFROM <http://id.nlm.nih.gov/mesh>\nWHERE { [] a ?class . }\nORDER BY ?class\n",
        'void_query' : "SELECT DISTINCT ?s ?p ?o \nwhere {?s a <http://rdfs.org/ns/void#Dataset>\n OPTIONAL {?s ?p ?o} }",
        'namespaces' : {
            rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
            rdfs: 'http://www.w3.org/2000/01/rdf-schema#',
            owl: 'http://www.w3.org/2002/07/owl#'
        },
        'example_queries' : [],
        'default_resource_image_url': 'images/rdf_flyer.gif',
        'default_id_prefix': 'mesh'
    }, options);

    lodestarResourcePrefix = _options.resource_prefix;
    lodestarQueryService = _options.resource_prefix + _options.query_servlet_name;
    lodestarExploreService = _options.resource_prefix + _options.servlet_base + "/" +
        _options.explore_servlet_name;
    lodestarResultsPerPage = _options.results_per_page;
    lodestarIslogging = _options.logging;
    lodestarRdfsInference = _options.inference;
    lodestarDefaultQuery = _options.default_query;
    lodestarVoidQuery = _options.void_query;
    lodestarNamespaces = _options.namespaces;
    lodestarDefaultResourceImg =  _options.resource_prefix + _options.default_resource_image_url;
    lodestarDefaultUriBase = lodestarNamespaces[_options.default_id_prefix];
    lodestarDescribeUrl = _options.resource_prefix + "describe";

    if (lodestarIslogging) {
        $('#lode-log').show();
        log("Parsed options...");
        log(_options);
    }
}


function _buildVoid(element) {

    var voidSparql = "PREFIX dcterms: <http://purl.org/dc/terms/> " +
        "PREFIX void: <http://rdfs.org/ns/void#> " +
        "PREFIX pav: <http://purl.org/pav/2.0/> " +
        "PREFIX prov: <http://www.w3.org/ns/prov#> " +
        "SELECT ?dataset ?title ?description ?version ?triples ?created " +
        "where { " +
        "?dataset a void:Dataset ; " +
        "dcterms:title ?title; " +
        "dcterms:description ?description ;  " +
        "pav:version ?version;      " +
        "dcterms:issued ?created;   " +
        "void:triples ?triples ;   " +
        "}";

    $.ajax ( {
        type: 'GET',
        url: lodestarQueryService + "?query=" + encodeURIComponent(voidSparql),
        headers: {
            Accept: "application/sparql-results+json"
        },
        success: function (json) {
            var _json = json;
            var _variables = _json.head.vars;
            var _results = _json.results.bindings;

            var datasetURI = _results[0].dataset.value;
            var title = _results[0].title.value;
            var desc = _results[0].description.value;
            var version = _results[0].version.value;
            var triples = _results[0].triples.value;
            var created = $.datepicker.formatDate('MM dd yy', new Date(_results[0].created.value.replace(/T.*/, '')));

            var div = $("<div></div>");
            div.append($("<span style='font-weight:bold;'>Dataset description</span>"));
            div.append($("<br/>"));
//            div.append(datasetURI);
            var ea = $('<a>' + datasetURI + '</a>');
            ea.attr('href', datasetURI);
            div.append("(");
            div.append(ea);
            div.append(")");
            element.append(div);

            var table = $("<table cellpadding='0' cellspacing='0' width='100%'></table>");
            element.append(table);

            var row1 =$('<tr />');
            row1.append($('<td align="left">Title</td>'));
            row1.append($('<td align="right">' + title + '</td>'));
            table.append(row1);

            var row2 =$('<tr />');
            row2.append($('<td align="left">Description</td>'));
            row2.append($('<td align="right">' + desc + '</td>'));
            table.append(row2);

            var row3 =$('<tr />');
            row3.append($('<td align="left">Version</td>'));
            row3.append($('<td align="right">' + version + '</td>'));
            table.append(row3);

            var row4 =$('<tr />');
            row4.append($('<td align="left">Issued</td>'));
            row4.append($('<td align="right">' + created + '</td>'));
            table.append(row4);

            var row5 =$('<tr />');
            row5.append($('<td align="left">Number of triples</td>'));
            row5.append($('<td align="right">' + triples + '</td>'));
            table.append(row5);

            if (_results.length > 1) {
                var row6 =$('<tr />');
                row6.append($('<td align="left">Previous versions</td>'));

                var td6 = $("<td align='right'></td>");
                var ul6 = $("<ul></ul>");
                row6.append(td6);
                td6.append(ul6);
                for (var i = 1; i < _results.length; i++) {
                    var formattedNode = _formatNode(_results[i].previous, 'previous');
                    ul6.append($("<li></li>").append(formattedNode));
                }
                table.append(row6);
            }
        },
        error: function (request, status, error) {
            displayError(request.responseText);
        }
    });

}


function _buildExplorerPage(element) {

    var id = element.attr("id") + "_lode_explore";
    element.after('<div id="' + id + '"></div>');

    var topObjectsDiv = $('<div class=\'topObjectDiv\'></div>');
    $("#" + id).append(topObjectsDiv);

    var resourceDepiction =  id + '_resourceDepiction';
    $(topObjectsDiv).append('<div id="' + resourceDepiction + '" style="float:right;"/>');
    renderDepiction($("#" + resourceDepiction));

    var topObjects =  id + '_resourceTopObject';
    $(topObjectsDiv).append('<div style=\'max-width:700px;\' id="' + topObjects + '"/>');
    renderShortDescription($("#" + topObjects));

    var resourceType =  id + '_resourceType';
    $(topObjectsDiv).append('<div id="' + resourceType + '"/>');
    renderResourceTypes($("#" + resourceType));

    var relatedToObjects =  id + '_relatedToObjects';
    $("#" + id).append('<div id="' + relatedToObjects + '"/>');
    renderRelatedToObjects($("#" + relatedToObjects));

    var relatedFromSubjects =  id + '_relatedFromSubjects';
    $("#" + id).append('<div id="' + relatedFromSubjects + '"/>');
    renderRelatedFromSubjects($("#" + relatedFromSubjects));

    $("#" + id).append('<hr/>');
    var downloadsSpan  = $("<span style='padding-left: 5px;'/>");

    var relid = getRelativeIdentifier(document.location.href);
    var xmllink = $('<a href="'+relid+'.rdf" />');
    var xmlimg = $('<img />');
    xmlimg.attr('src', lodestarResourcePrefix + 'images/file_RDF_XML_small.gif');
    xmlimg.attr('alt', 'RDF/XML');
    xmlimg.attr('title', 'Show RDF/XML for this resource');
    xmllink.append(xmlimg);

    var n3link = $('<a href="'+relid+'.n3" />');
    var n3img = $('<img />');
    n3img.attr('src', lodestarResourcePrefix + 'images/file_RDF_N3_small.gif');
    n3img.attr('alt', 'RDF/N3');
    n3img.attr('title', 'Show RDF/N3 for this resource');
    n3img.attr('style','cursor:pointer');
    n3link.append(n3img);

    var jsonlink = $('<a href="'+relid+'.json-ld" />');
    var jsonimg = $('<img />');
    jsonimg.attr('src', lodestarResourcePrefix + 'images/file_RDF_JSONLD_small.jpg');
    jsonimg.attr('alt', 'RDF/JSON');
    jsonimg.attr('title', 'Show RDF/JSON for this resource');
    jsonimg.attr('style','cursor:pointer');
    jsonlink.append(jsonimg);

    downloadsSpan.append(xmllink);
    downloadsSpan.append("&nbsp;&nbsp;");
    downloadsSpan.append(n3link);
    downloadsSpan.append("&nbsp;&nbsp;");
    downloadsSpan.append(jsonlink);
    $("#" + id).append(downloadsSpan);
}

function _buildSparqlPage(element) {
    var sparqlForm = $(
       "<form id='lodestar-sparql-form' class='ui-widget ui-corner-all'"+
       " name='lode-star-sparql form' action='#lodestart-sparql-results' method='GET'></form>");
    var fieldSet= $("<fieldset></fieldset>");
    fieldSet.append($("<legend>Enter SPARQL Query</legend>"));
    sparqlForm.append(fieldSet);
    var section1 = $("<section class='lodestar-grid12 grid_12 alpha'></section>");
    var section2 = $("<section id='example_queries' class='lodestar-grid12 grid_12 alpha'></section>");

//    fieldSet.append($("<legend>Enter SPARQL Query</legend>"));
    fieldSet.append(section1);
    fieldSet.append(section2);

    var myAreaLabel = $("<label class='query-label' for='textarea'>SPARQL Query Text</label>");
    var myTextArea = $("<textarea  name='query' id='textarea' rows='20' style='width:100%'></textarea>");

    section1.append($("<p></p>").append(myAreaLabel, myTextArea));


    section1.append(
        $("<p style='float: right;'></p>")
          .append( $("<label for='format'>Output: </label>") )
          .append(
              $("<select name='format' id='format'></select>")
                .append('<option value="HTML">HTML</option>')
                .append('<optgroup label="SELECT">')
                .append('<option value="XML">XML</option>')
                .append('<option value="JSON">JSON</option>')
                .append('<option value="CSV">CSV</option>')
                .append('<option value="TSV">TSV</option>')
                .append('</optgroup>')
                .append('<optgroup label="DESCRIBE or CONSTRUCT">')
                .append('<option value="RDF/XML">RDF/XML</option>')
                .append('<option value="N3">RDF/N3</option>')
                .append('<option value="JSON-LD">JSON-LD</option>')
                .append('<option value="TURTLE">TURTLE</option>')
                .append('</optgroup>')
        )
    );

    var control_p = $("<p></p>");
    section1.append(control_p);

    if (lodestarRdfsInference) {
        control_p
          .append( $("<label for='inference'>RDFS inference? </label>") )
          .append( $("<input type='checkbox' id='inference' name='inference' value='true'/>") )
          .append("&#160;&#160;&#160;");
    }

    select = $("<select name='year' id='year'></select>")
              .append("<option value='current'>Current</option>");
    var interimYear = NLM.meshYear + 1;
    select.append("<option value='"+interimYear+"'>"+interimYear+" (interim)</option>");
    for (var i in [0, 1, 2]) {
        var year = NLM.meshYear - i;
        select.append("<option value='"+year+"'>"+year+"</option>");
    }
    select.on("change", _fixQueryYear);

    control_p
      .append( $("<label for='year'>Year</label>") )
      .append(select);

    section1.append(
        $("<p></p>").append(
            $("<label for='limit'>Results per page: </label>"))
            .append(
            $("<select name='limit' id='limit'></select>")
                .append("<option value='25' selected='selected'>25</option>")
                .append("<option value='50'>50</option>")
                .append("<option value='100'>100</option>")
                .append("<option value='1000'>1000</option>")
        )
    );

    section1.append (
        $("<input id='offset' name='offset' type='hidden' value='0' />")

    );


    section1.append($("<p></p>")
            .append("<input type='button' class='submit ui-button ui-widget ui-corner-all' " +
                    "style='display: inline;'  onclick='submitQuery()' value='Submit Query' />&nbsp;")
            .append("<input type='button' class='submit  ui-button ui-widget ui-corner-all' " +
                    "style='display: inline;' onclick='reloadPage()' value='Reset' />")
    );

    section1.append("<div id='query-executing-spinner'>" +
        "Executing query...&nbsp;<img src='" + lodestarResourcePrefix + "images/loadingAnimation.gif'>" +
        "</div>");

    section2.append(
        $("<p></p>").append("<h3>Example Queries</h3>")
    );

    section2.append(
        ("<ul id='queries_list'></ul>")
    );

    element.append(sparqlForm);

    var resultsSection = $("<section id='lodestar-results-section' styname='results'></section>");

    resultsSection.append ("<div id='pagination' class='pagination-banner'></div>");

    resultsSection.append ("<div style='padding: 5px; width:99%;overflow: scroll;'>" +
        "<table id='lodestar-results-table' class='table table-bordered table-hover'></tabel>" +
        "</div>");

    console.info("calling element.append(resultsSection);");
    element.append(resultsSection);
}

function initSparql() {
    $(document).ready(function() {
        sparqlQueryTextArea = CodeMirror.fromTextArea($('#textarea')[0]);
        resetPage();
        setNamespaces(lodeNamespacePrefixes);
        setExampleQueries ();
        querySparql();
    });
}

function submitQuery() {
    // reset any offset
    $('#offset').val(0);
    $('#lodestar-sparql-form').submit();
}

function setDefaultQuery() {
    sparqlQueryTextArea.setValue( _getPrefixes() + "\n" + lodestarDefaultQuery );
}

function querySparql () {

    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    var querytext = null;
    var limit = lodestarResultsPerPage;
    var offset = 0;
    var year;
    var rdfs = "false";

    // if no query just return and wait for one
    if (!queryString) {
        setDefaultQuery();
        return;
    }

    // get the query string and execute
    if (queryString.match(/query=/)) {
        querytext = this._betterUnescape(queryString.match(/query=([^&]*)/)[1]);
        var query = _getPrefixes() + querytext;
    }

    if (queryString.match(/limit=/)) {
        limit = this._betterUnescape(queryString.match(/limit=([0-9]*)/)[1]);
        lodestarResultsPerPage = limit;
        $('#limit').val(limit);
    }

    if (queryString.match(/offset=/)) {
        offset = this._betterUnescape(queryString.match(/offset=([0-9]*)/)[1]);
        $('#offset').val(offset);
    }

    if (queryString.match(/year=/)) {
        year = this._betterUnescape(queryString.match(/year=([^&]*)/)[1]);
        $('#year').val(year);
    }

    if (lodestarRdfsInference) {
        if (queryString.match(/inference=/)) {
            var iv = this._betterUnescape(queryString.match(/inference=([^&]*)/)[1]);

            if (iv == 'true') {
                rdfs = "true";
                $('#inference').attr("checked", true);
            }
        }
    }

    clearErrors();
    if (!querytext) {
        querytext = query;
    }

    // GET THE RENDERING
    var rendering = "HTML";
    if (queryString.match(/format=/)) {
        rendering = this._betterUnescape(queryString.match(/format=([^&]*)/)[1]);
    }

    sparqlQueryTextArea.setValue(querytext);

    var exp = /^\s*(?:PREFIX\s+\w*:\s?<[^>]*>\s*)*(\w+)\s*.*/i;
    var match = exp.exec(querytext);
    var successFunc;
    var requestHeader;


    if (match) {
        if (match[1].toUpperCase() == 'CONSTRUCT' || match[1].toUpperCase() == 'DESCRIBE') {

            if (rendering.match(/HTML/)) {
                requestHeader = "text/plain";
                successFunc = function(model) {
                    hideBusyMessage();
                    renderGraphQuery(model, tableid);
                };
            }
            else if (rendering.match(/RDF/)) {
                location.href = lodestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=RDF/XML";
            }
            else if (rendering.match(/JSON-LD/)) {
                location.href = lodestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=JSON-LD";
            }
            else if (rendering.match(/N3/)) {
                location.href = lodestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=N3";
            }
            else if (rendering.match(/TURTLE/)) {
                location.href = lodestarQueryService + "?query=" + encodeURIComponent(querytext) + "&format=TURTLE";
            }
            else  {
                displayError("You can only render graph queries in either HTML, RDF/XML, RDF/JSON, RDF/N3, or TURTLE format");
                return;
            }
        }
        else if (match[1].toUpperCase() == 'DELETE' || match[1].toUpperCase() == 'UPDATE') {
            displayError("UPDATE or DELETE queries not allowed");
            return;
        }
        else {
            if (rendering.match(/HTML/)) {
                requestHeader = "application/sparql-results+json";
                successFunc = function(json) {
                    hideBusyMessage();
                    renderSparqlResultJsonAsTable(json, tableid);
                };
            }
            else if (rendering.match(/^XML/)) {
                location.href = lodestarQueryService + "?query=" +
                  encodeURIComponent(querytext) + "&format=XML&limit=" + limit + "&offset=" + offset + "&inference=" + rdfs;
            }
            else if (rendering.match(/JSON$/)) {
                location.href = lodestarQueryService + "?query=" +
                  encodeURIComponent(querytext) + "&format=JSON&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else if (rendering.match(/CSV/)) {
                location.href = lodestarQueryService + "?query=" +
                  encodeURIComponent(querytext) + "&format=CSV&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else if (rendering.match(/TSV/)) {
                location.href = lodestarQueryService + "?query=" +
                  encodeURIComponent(querytext) + "&format=TSV&limit=" + limit + "&offset=" + offset+ "&inference=" + rdfs;
            }
            else  {
                displayError("You can only render SELECT queries in either HTML, XML, CSV, TSV or JSON format");
                return;
            }
        }
    }

    // about to execute query
    displayBusyMessage();
    setNextPrevUrl(querytext, limit, offset, rdfs);
    $.ajax ( {
        type: 'GET',
        url: lodestarQueryService + "?" + queryString,
        headers: {
            Accept: requestHeader
        },
        success: successFunc,
        error: function (request, status, error) {
            hideBusyMessage();
            displayError(request.responseText);
        }
    });
}

function setNextPrevUrl (queryString, limit, offset, rdfs) {
    var _offset = parseInt(offset);
    var results_per_page = parseInt(lodestarResultsPerPage);

    var qs_base = "query=" + encodeURIComponent(queryString) + "&limit=" + limit +
                  "&inference=" + rdfs;

    lodestarNextUrl = qs_base + "&offset=" + (_offset + results_per_page);
    lodestarPrevLink = _offset > 0;
    if (lodestarPrevLink) {
        var prev_offset = _offset >= results_per_page ? _offset - results_per_page : 0;
        lodestarPrevUrl = qs_base + "&offset=" + prev_offset;
    }
}

function renderGraphQuery (graph, tableid) {

    var rows = graph.split (/\n/);
    $("#" + tableid).html("");

    var header = createTableHeader(['Subject', 'Predicate', 'Object']);
    $("#" + tableid).append(header);

    // parse an n-triples file, markup links
    for (var x = 0 ; x < rows.length; x++ ) {
        // check for commented lines #

        // remove line endings
        var row = rows[x].replace (/\s+.$/, '');

        row = row.replace (/\^\^\<.*\>$/, '');
        var cells = row.split(/["<>]+\s+[<>"]+/);

        // remove data types

        // ignore blank nodes
        if (cells.length == 3) {
            var tr =$('<tr />');
            for (var j = 0; j < cells.length; j ++) {
                var cell = cells[j].replace (/^["<]/, '');
                cell = cell.replace (/[">]$/, '');
                var td = $('<td />');
                var resource = cell;
                resource = resource.replace (/^["<]/, '');
                resource = resource.replace (/^[">]\s+\.$/, '');
                if (resource.match(/^(https?|ftp|mailto|irc|gopher|news):/)) {
                    var shortForm =  _toQName(resource);
                    if (shortForm == null) {
                        shortForm = resource;
                    }

                    var internalHref = "./describe?uri=" + encodeURIComponent(resource);

                    var linkSpan  = $('<span/>');
                    var img = $('<img />');
                    img.attr('src', lodestarResourcePrefix + 'images/external_link.png');
                    img.attr('alt', '^');
                    img.attr('title', 'Resolve URI on the web');

                    var ea = $('<a />');
                    ea.attr('href', resource);
                    ea.attr('class', 'externallink');
                    ea.attr('target', 'blank');
                    ea.append(img);


                    var a = $('<a />');
                    a.attr('href',internalHref);
                    a.text(shortForm);
                    linkSpan.append(a);
//                    linkSpan.append('&nbsp;');
//                    linkSpan.append(ea);
                    td.append(linkSpan);
                }
                else {
                    td.append (resource);
                }
                tr.append(td);
            }
        }
        $("#" + tableid).append(tr);
    }
}

function displayPagination()  {
    var prevA;
    if (lodestarPrevLink) {
        prevA = $('<a></a>');
        prevA.attr('href',"?" + lodestarPrevUrl);
        prevA.attr('class',"pag prev");
        prevA.text("Previous");
    }
    else {
        prevA = $('<span>Previous</span>');
    }

    var nextA = $('<a></a>');
    nextA.attr('href',"?" + lodestarNextUrl);
    nextA.attr('class',"pag next");
    nextA.text("Next");

    var pagtext = $('<span></span>');
    pagtext.attr('class', "pag pagmes");
    pagtext.text('');
    pagtext.text($('#limit').val() + ' results per page (offset ' + $('#offset').val() + ")");
    $('#pagination').append(prevA);
    $('#pagination').append(pagtext);
    $('#pagination').append(nextA);
    $('#pagination').show();
}

function renderSparqlResultJsonAsTable (json, tableid) {
    log("sparql query rendering json");

    // clear existing content
    $("#" + tableid).html("");

    var _json = json;

    if (_json == undefined) {
        displayError("There was a problem getting results for this query");
    }
    else {
        try {

            if (_json.results) {
                if (_json.results.bindings) {
                    var _results = _json.results.bindings;

                    if (_results.length ==0) {
                        alert("No results for query");
                    }
                    else {
                        var _variables = _json.head.vars;

                        var header = createTableHeader(_variables);

                        $("#" + tableid).append(header);

                        displayPagination();

                        for (var i = 0; i < _results.length; i++) {
                            var row =$('<tr />');
                            var binding = _results[i];
                            for (var j = 0 ; j < _variables.length; j++) {
                                var varName = _variables[j];
                                var formattedNode = _formatNode(binding[varName], varName);
                                var cell = $('<td />');
                                cell.append (formattedNode);
                                row.append(cell);
                            }
                            $("#" + tableid).append(row);
                        }
                    }
                }
                else {
                    displayError("No result bindings");
                }
            }
            else if (_json.boolean != undefined)  {
                var header = createTableHeader(["boolean"]);
                $("#" + tableid).append(header);
                var row =$('<tr />');
                var cell = $('<td />');
                if (_json.boolean) {
                    cell.append ("True");
                }
                else {
                    cell.append ("False");
                }
                row.append(cell);
                $("#" + tableid).append(row);
            }
            else {
                alert("no results!");
            }
        }
        catch (err) {
            displayError("Problem rendering results: "+ err.message);
        }
    }
}

function _formatNode (node, varName) {
    if (!node) {
        return _formatUnbound(node, varName);
    }
    if (node.type == 'uri') {
        return _formatURI(node, varName);
    }
    if (node.type == 'bnode') {
        return _formatBlankNode(node, varName);
    }
    if (node.type == 'literal') {
        return _formatPlainLiteral(node, varName);
    }
    if (node.type == 'typed-literal') {
        return _formatTypedLiteral(node, varName);
    }
    return '???';
}

// The `node` input here is json sparql query results, and might look something like this:
//     { type="uri", value="http://id.nlm.nih.gov/mesh/vocab#TopicalDescriptor"}

function _formatURI (node, varName) {
    var title = node.value;
    var className = 'graph-link';
    var shortForm =  _toQName(node.value);
    var text = shortForm ? shortForm : "<" + node.value + ">";

    // handle external link
    var linkSpan  = $('<span/>');
    var a = $('<a />');
    a.attr('class', className);

    if (node.value.match(/^https?:\/\/id.nlm.nih.gov\//)) {
        if (node.value.match(/\/mesh\/vocab\#/)) {
            href = lodestarDescribeUrl + "?uri=" + encodeURIComponent(node.value);
        }
        else {
            href = node.value.replace(/https?:\/\/id.nlm.nih.gov/, "");
        }
        a.attr('href', href);
        a.text(text);
    }

    else if (node.value.match(/^(https?|ftp|mailto|irc|gopher|news):/)) {
        var img = $('<img />');
        img.attr('src', lodestarResourcePrefix + 'images/external_link.png');
        img.attr('alt', '^');
        img.attr('title', 'Resolve URI on the web');

        var ea = $('<a />');
        ea.attr('href', node.value);
        ea.attr('class', 'externallink');
        ea.attr('target', 'blank');
        ea.append(img);

        var a = $('<a />');
        a.attr('href', node.value);
        a.text(text);
    }
    linkSpan.append(a);
    return linkSpan;
}

function _hrefBuilder(uri, label, internal) {

    var internalHref = lodestarDescribeUrl + "?uri=" + encodeURIComponent(uri);
    var className = 'graph-link';

    var linkSpan  = $('<span/>');

    var a = $('<a />');
    if (internal) {
        a.attr('href', internalHref);
        a.attr('title', uri);

    }
    else {
        a.attr('href', uri);
        a.attr('title', uri);
        a.attr('target', 'blank');

    }
    a.attr('class', className);
    a.text(label);

    linkSpan.append(a);

    if (!internal) {
        linkSpan.append('&nbsp;');
        var img = $('<img />');
        img.attr('src', lodestarResourcePrefix + 'images/external_link.png');
        img.attr('alt', '^');
        img.attr('title', 'Resolve URI on the web');

        var ea = $('<a />');
        ea.attr('href', uri);
        ea.attr('title', uri);
        ea.attr('class', 'externallink');
        ea.attr('target', 'blank');
        ea.append(img);
        linkSpan.append(ea);
    }
    return linkSpan;
}


function setExampleQueries() {

    if (exampleQueries != null) {

        if (exampleQueries.length > 0) {

            for (var x = 0;x <exampleQueries.length; x ++) {

                // queries_list
                var shortname = exampleQueries[x].shortname;
                var desc = exampleQueries[x].description;
                var query= exampleQueries[x].query;

                log ("query:" + shortname + " " + desc + " " + query) ;
                var a = $('<a></a>');
                a.attr ('id', x);
                a.attr ('class', 'query-short');
                a.text (shortname);

                $(a).click(function () {
                    _setTextAreQuery(this);
                });

                var li = $('<li></li>');
                li.append(a);
                li.append($('<p></p>').append(desc));
                $('#queries_list').append(li);
            }
        }
    }
}

function _fixQueryYear() {
    var year_val = $('#year').val();
    var graph = 'http://id.nlm.nih.gov/mesh' + (year_val != 'current' ? '/' + year_val : '');
    var prefix = 'mesh' + (year_val != 'current' ? year_val : '');

    sparqlQueryTextArea.setValue(
        sparqlQueryTextArea.getValue()
            .replace(new RegExp("FROM\\s<http://id.nlm.nih.gov/mesh(/\\d+)?.*?>"), "FROM <" + graph + ">")
            .replace(new RegExp("mesh(\\d+)?:(?!\\s)", "g"), prefix + ":")
    );
}

function _setTextAreQuery(anchor) {
    var q = exampleQueries[anchor.id];
    sparqlQueryTextArea.setValue(_getPrefixes() + "\n" + q.query);
    _fixQueryYear();
    // Turn inferencing on if needed, but don't turn it off if it's not
    if (q.hasOwnProperty("inferencing") && q.inferencing) {
        $('#inference').prop('checked', true);
    }
}

function _formatPlainLiteral (node, varName) {
    var text = '"' + node.value + '"';
    if (node['xml:lang']) {
        text += '@' + node['xml:lang'];
    }
    return document.createTextNode(node.value);
}

function _formatTypedLiteral(node, varName) {
    var text = '"' + node.value + '"';
    if (node.datatype) {
        text += '^^' + this._toQNameOrURI(node.datatype);
    }
    if (this._isNumericXSDType(node.datatype)) {
        var span = document.createElement('span');
        span.title = text;
        span.appendChild(document.createTextNode(node.value));
        return span;
    }
    return document.createTextNode(node.value);
}

function _formatBlankNode(node, varName) {
    return document.createTextNode('_:' + node.value);
}

function _formatUnbound(node, varName) {
    var span = document.createElement('span');
    span.className = 'unbound';
    span.title = 'Unbound';
    span.appendChild(document.createTextNode('-'));
    return span;
}

function _toQName(uri) {
    // Find the *longest* match
    var longest_match = '';
    var prefix_match;
    for (var prefix in lodestarNamespaces) {
        var nsURI = lodestarNamespaces[prefix];
        if (uri.indexOf(nsURI) == 0 && nsURI.length > longest_match.length) {
            longest_match = nsURI;
            prefix_match = prefix;
        }
    }
    if (typeof(prefix_match) !== 'undefined') {
        return prefix_match + ':' + uri.substring(longest_match.length);
    }
    else {
        return null;
    }
}

function _toQNameOrURI(uri) {
    var qName = this._toQName(uri);
    return (qName == null) ? '<' + uri + '>' : qName;
}

function _isNumericXSDType (datatypeURI) {
    for (i = 0; i < this._numericXSDTypes.length; i++) {
        if (datatypeURI == this._xsdNamespace + this._numericXSDTypes[i]) {
            return true;
        }
    }
    return false;
}

var _xsdNamespace = 'http://www.w3.org/2001/XMLSchema#';
var _numericXSDTypes = ['long', 'decimal', 'float', 'double', 'int',
    'short', 'byte', 'integer', 'nonPositiveInteger', 'negativeInteger',
    'nonNegativeInteger', 'positiveInteger', 'unsignedLong',
    'unsignedInt', 'unsignedShort', 'unsignedByte'];


function createTableHeader (names) {
    var htmlString = "<thead>";
    for (var i = 0 ; i < names.length; i++) {
        log(names[i]);
        htmlString +="<th>" + names[i] + "</th>";
    }
    htmlString += "</thead>";
    return htmlString;
}

function renderResourceTypes(element) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        //uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        //var query = _getPrefixes() + uri;

        var loadingimg = $('<img />');
        loadingimg.attr('src', lodestarResourcePrefix + 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching resource type data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/resourceTypes?uri=" + identifier,
            success: function (data){

                loading.empty();
                if (data.length > 0) {
                    var div = element;
                    if (data[0].relatedObjects.length > 0) {
                        var about = $("<h3 class='side'>Type: </h3>");
                        var span = $("<span style='font-size:larger'></span>");
                        var uriset = {};
                        uriset[data[0].relatedObjects[0].uri] = true;
                        span.append (_hrefBuilder(data[0].relatedObjects[0].uri, data[0].relatedObjects[0].label, true));
                        div.append(about);
                        div.append(span);
                        var p = $("<p></p>");
                        p.append(data[0].relatedObjects[0].description);

                        for (var x = 1; x < data.length; x ++) {

                            for (var z = 0; z <data[x].relatedObjects.length; z++) {

                                var description = data[x].relatedObjects[z].description;
                                var uri = data[x].relatedObjects[z].uri;
                                uriset[uri] = true;
                                var label = data[x].relatedObjects[z].label;

                                p.append(_hrefBuilder(uri, label, true));
                                if (description) {
                                    p.append(" : ");
                                    p.append(description);
                                }
                                p.append($("<br/>"));
                            }
                        }
                        p.append($("<br/>"));

                        p.append("<span class='moreTypes'>more types...</span>").click(function() {
                            $('span.moreTypes').remove();
                            renderAllResourceTypes(p, uriset);
                        });
                        div.append(p);
                    }
                }

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}


function renderAllResourceTypes(element, exclude) {
    var match = document.location.href.match(/\?(.*)/);
    var queryString = match ? match[1] : '';

    if (queryString.match(/uri=/)) {

        var loadingimg = $('<img />');
        loadingimg.attr('src', lodestarResourcePrefix + 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching more resource type data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/resourceAllTypes?" + queryString,
            success: function (data){

                var div = element;
                var p = $("<p></p>");

                if (data.length == 0) {
                    p.append("No more type information available for this resource");
                }
                else {
                    for (var x = 0; x < data.length; x ++) {
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var description = data[x].relatedObjects[z].description;
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (!exclude[uri]) {
                                p.append(_hrefBuilder(uri, label, true));
                                if (description) {
                                    p.append(" : ");
                                    p.append(description);
                                }
                                p.append($("<br/>"));
                            }
                        }
                    }
                }
                div.append(p);
                loading.empty();
            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

/**
 * This returns an RDF URI based on the self-url of this page.  If there is a
 * query string parameter `uri`, then use that.  Otherwise, we'll assume the URL
 * is of the form http://<domain>/<script-url>/<id>.<ext>, and we'll create a URI
 * of the form http://id.nlm.nih.gov/mesh/<id>.  If neither matches, then return null.
 */
function getIdentifier(href) {
    var match = href.match(/\?(.*)/);
    var formMatch  = href.match(/https?:\/\/[^\/]+\/[^\/]+\/([^\.]+)/);
    if (match) {
        var queryString = match[1];
        var uriMatch = queryString.match(/uri=([^&]+)/);
        if (uriMatch) {
            return uriMatch[1];
        }
    }
    else if (formMatch) {
        return lodestarDefaultUriBase + formMatch[1];
    }
    else {
        return null;
    }
}

/**
 * This returns a relative identifier based on the url of this page and the uri.
 * It goes farther than getIdentifier() in that it should stay within the current system.
 */
function getRelativeIdentifier(href) {
    // $2 - the first path segment
    // $3 - the rest of the path excluding any extension
    var relpath = href.match(/\/\/([^\/]+)\/([^\/]+)\/([^\.]+)/);
    var hasQueryString = href.match(/\?(.*)/);
    if (hasQueryString) {
        var queryString = hasQueryString[1];
        var uriMatch = queryString.match(/uri=([^&]+)/);
        if (uriMatch) {
            var canonical = uriMatch[1].replace(/%3A/g, ':').replace(/%2F/g, '/');
            return canonical.replace(/^https?:\/\/[^\/]+\/[^\/]+/, '/'+relpath[2]);
        }
    }
    else if (relpath) {
        return '/'+relpath[2]+'/'+relpath[3];
    }
    else {
        return null;
    }
}

function renderDepiction (element) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/resourceDepictions?uri=" + identifier,
            success: function (data){

                var imgurl = lodestarDefaultResourceImg;
                if (data.length > 0) {
                    imgurl = data[0].url;
                }
                var img = $('<img />');
                img.attr('src', imgurl);
                img.attr('alt', '^');
                img.attr('title', 'Resource depiction');
                element.append(img) ;
            },
            error: function (request, status, error) {
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}
function renderShortDescription (element) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        //uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', lodestarResourcePrefix + 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/resourceShortDescription?uri=" + identifier,
            success: function (data){
                loading.empty();
                var div = element;

                var about = $("<h3 class='side'>" + "About: " + "</h3>");
                var span2 = $("<span style='font-size:larger'></span>");
                span2.append(_hrefBuilder(data.uri, data.displayLabel, false));
                div.append(about);
                div.append(span2);
                var p = $('<p></p>');

                p.append($("<span style='color:gray;'></span>").append(data.uri));
                p.append("<br/>");

                if (data.description) {
                    p.append(data.description);
                    p.append("<br/>");

                }
                if (data.datasetUri) {
                    var propertyP = $("<a style='font-weight: bold;' title='http://rdfs.org/ns/void#inDataset' href='"+loadstarDescribeUrl+"?uri=" +
                        encodeURIComponent("http://rdfs.org/ns/void#inDataset") + "'>Dataset</a>");
                    p.append(propertyP);
                    p.append(" : ");

                    p.append(_hrefBuilder(data.datasetUri, data.datasetUri, true));
//                    p.append($("<ul></ul>")
//                        .append($("<li></li>")
//                        .append(_hrefBuilder(data.datasetUri, data.datasetUri, true)))
//                    );
                    p.append($("<br/>"));
                }
                div.append(p);
                renderTopRelatedObjects(p);

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

function renderTopRelatedObjects(p) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        //uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
        //var query = _getPrefixes() + uri;

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/resourceTopObjects?uri=" + identifier,
            success: function (data){

//                var p = $("<p></p>");
                for (var x = 0; x < data.length; x ++) {

                    var propertyLabel = data[x].propertyLabel;

                    for (var z = 0; z <data[x].relatedObjects.length; z++) {

                        var uri = data[x].relatedObjects[z].uri;
                        var label = data[x].relatedObjects[z].label;

                        p.append($("<span style='text-transform: capitalize;color: #0f2559; font-weight: bold'></span>").append(propertyLabel));
                        p.append(" : ");
                        if (uri == undefined){
                            p.append("\"" + label + "\"");
//                            p.append($("<ul></ul>")
//                                .append($("<li></li>")
//                                .append("\"" + label + "\"")));
                        }
                        else {
//                            p.append($("<ul></ul>")
//                                .append($("<li></li>")
//                                .append(_hrefBuilder(uri, label, true))));
                            p.append(_hrefBuilder(uri, label, true));
                        }
                        p.append($("<br/>"));

                    }
                }
            },
            error: function (request, status, error) {
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

function renderRelatedToObjects(element) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        //uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', lodestarResourcePrefix + 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching related to data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/relatedToObjects?uri=" + identifier,
            success: function (data){

                loading.empty();
                if (data.length > 0) {
                    var div = $('<p></p>');

                    var about = $("<h3>" + "Related to" + "</h3>");

                    element.append(about);

                    for (var x = 0; x < data.length; x ++) {

                        var propertyLabel = data[x].propertyLabel;
                        var propertyUri = data[x].propertyUri;

                        var propertyP = $("<a style='font-weight: bold;' href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(propertyUri) + "'>"+  propertyLabel +"</a>");

                        div.append(propertyP);

                        var list = $('<ul></ul>');

                        var maxReached = false;
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (z == 10 & data[x].relatedObjects.length > 10) {
                                list.append("<li class='more'>more...</li>").click(function() {
                                    $('ul li.more').remove();
                                    $('ul li:gt('+z+')').show();
                                });
                                maxReached = true;
                            }

                            if (uri == undefined){
                                if (maxReached) {
                                    list.append("<li style='display:none'>\""+  label +"\"</li>");
                                }
                                else {
                                    list.append("<li>\""+  label +"\"</li>");
                                }
                            }
                            else {
                                if (maxReached) {
                                    list.append("<li style='display:none'><a href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li><a href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                            }
                        }
                        div.append(list);

                        var typelist = $('<span></span>');

                        for (var y = 0; y <data[x].relatedObjectTypes.length; y++) {
                            if (y == 0 ) {
                                typelist.append(" (");
                            }
                            var typeUri = data[x].relatedObjectTypes[y].uri;
                            var typeLabel = data[x].relatedObjectTypes[y].label;
                            var typeDesc = data[x].relatedObjectTypes[y].description;

                            if (typeUri == undefined){
                                typelist.append("\""+  typeLabel +"\"");
                            }
                            else {
                                typelist.append("<a href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(typeUri) + "'>"+  typeLabel +"</a>");
                            }
                            if (data[x].relatedObjectTypes.length > y+1) {
                                typelist.append(", ");
                            }
                            else {
                                typelist.append(")");
                            }
                        }
                        propertyP.after(typelist);
//                        table.append(tr);
                    }
                    element.append(div);
                }
            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}

function renderRelatedFromSubjects(element) {
    var identifier = getIdentifier(document.location.href);

    if (identifier) {
        //uri = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);

        var loadingimg = $('<img />');
        loadingimg.attr('src', lodestarResourcePrefix + 'images/ajax-loader.gif');
        loadingimg.attr('alt', '.');
        var loading = $('<p>Fetching related from data...</p>').append(loadingimg);
        element.append(loading);

        $.ajax ( {
            type: 'GET',
            url: lodestarExploreService + "/relatedFromSubjects?uri=" + identifier,
            success: function (data){

                loading.empty();

                if (data.length > 0) {

                    var about = $("<h3>" + "Related From" + "</h3>");
                    var div = $('<p></p>');

                    element.append(about);
                    element.append(div);

//                    var table = $('<table></table>');
//                    table.append($("<tr><th>Resources</th><th>Resources types</th><th>Relation</th></tr>"));

                    for (var x = 0; x < data.length; x ++) {

                        var propertyLabel = data[x].propertyLabel;
                        var propertyUri = data[x].propertyUri;

//                        var tr = $('<tr></tr>');
                        var typelist = $('<span></span>');

                        for (var y = 0; y <data[x].relatedObjectTypes.length; y++) {
                            if (y == 0) {
                                typelist.append("(");
                            }
                            var typeUri = data[x].relatedObjectTypes[y].uri;
                            var typeLabel = data[x].relatedObjectTypes[y].label;
                            var typeDesc = data[x].relatedObjectTypes[y].description;
                            typelist.append("<a title='"+ typeUri + "' href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(typeUri) + "'>"+  typeLabel +"</a>");
                            if (data[x].relatedObjectTypes.length > y+1) {
                                typelist.append(", ");
                            }
                            else {
                                typelist.append(") ");
                            }
                        }

                        div.append(typelist);
                        var propertyP = $("<a style='font-weight: bold;' href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(propertyUri) + "'>"+  propertyLabel +"</a>");
                        div.append(propertyP);

                        var list = $('<ul></ul>');

                        var maxReached = false;
                        for (var z = 0; z <data[x].relatedObjects.length; z++) {
                            var uri = data[x].relatedObjects[z].uri;
                            var label = data[x].relatedObjects[z].label;

                            if (z == 10 & data[x].relatedObjects.length > 10) {
                                list.append("<li class='more'>more...</li>").click(function() {
                                    $('ul li.more').remove();
                                    $('ul li:gt('+z+')').show();
                                });
                                maxReached = true;
                            }

                            if (uri == undefined){
                                if (maxReached) {
                                    list.append("<li style='display:none'"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li>"+  label +"</a></li>");
                                }
                            }
                            else {
                                if (maxReached) {
                                    list.append("<li style='display:none'><a href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                                else {
                                    list.append("<li><a href='"+lodestarDescribeUrl+"?uri=" + encodeURIComponent(uri) + "'>"+  label +"</a></li>");
                                }
                            }
                        }
                        div.append(list);
                    }
                }

            },
            error: function (request, status, error) {
                loading.empty();
                hideBusyMessage();
                displayError(request.responseText);
            }
        });
    }
}


function renderXML(uri) {
    var match_id = document.location.href.match(/\/([DQTMC][0-9]+)/);
    var idString = match_id ? match_id[1] : '';
    if ( idString ) {
        location.href = lodestarExploreService + "?id=" + idString + "&format=rdf";
    }
    else {
        var match_query = document.location.href.match(/\?(.*)/);
        var queryString = match_query ? match_query[1] : '';
        if (queryString.match(/uri=/)) {
            var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
            location.href = lodestarQueryService + "?query=" + lodestarDescribeUrl +
                encodeURIComponent("<" + param + ">") + "&format=RDF/XML";
        }
    }
}

function renderN3(uri) {
    var match_id = document.location.href.match(/\/([DQTMC][0-9]+)/);
    var idString = match_id ? match_id[1] : '';
    if ( idString ) {
        location.href = lodestarExploreService + "?id=" + idString + "&format=n3";
    }
    else {
        var match_query = document.location.href.match(/\?(.*)/);
        var queryString = match_query ? match_query[1] : '';
        if (queryString.match(/uri=/)) {
            var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
            location.href = lodestarQueryService + "?query=" + lodestarDescribeUrl +
                encodeURIComponent("<" + param + ">") + "&format=N3";
        }
    }
}

function renderJson(uri) {
    var match_id = document.location.href.match(/\/([DQTMC][0-9]+)/);
    var idString = match_id ? match_id[1] : '';
    if ( idString ) {
        location.href = lodestarExploreService + "?id=" + idString + "&format=json";
    }
    else {
        var match_query = document.location.href.match(/\?(.*)/);
        var queryString = match_query ? match_query[1] : '';
        if (queryString.match(/uri=/)) {
            var param = this._betterUnescape(queryString.match(/uri=([^&]*)/)[1]);
            location.href = lodestarQueryService + "?query=" + lodestarDescribeUrl +
                encodeURIComponent("<" + param + ">") + "&format=JSON-LD";
        }
    }
}



function _getPrefixes () {
    var prefixes = '';
    if (this.queryNamespaces === undefined) {
        this.queryNamespaces = buildNamespaces(NLM.meshYear, NLM.meshYear - 2);
    }
    for (var prefix in this.queryNamespaces) {
        var uri = this.queryNamespaces[prefix];
        prefixes = prefixes + 'PREFIX ' + prefix + ': <' + uri + '>\n';
    }
    return prefixes;
}

function setNamespaces (namespaces) {
    this.lodestarNamespaces = namespaces;
}

function _betterUnescape (s) {
    return unescape(s.replace(/\+/g, ' '));
}

function resetPage() {
    displaySparqlEndpoint();
    $('#pagination').hide();

    $('#limit').val(lodestarResultsPerPage);
    $('#offset').val(0);

    hideBusyMessage();
    clearErrors();
}

function clearErrors() {
    $("#error-text").text("");
    $("#error-div").hide();
}

function displaySparqlEndpoint() {

    $("#sparql-endpoint-url").text(lodestarQueryService);
}

function reloadPage() {
    var match = document.location.href.match(/(.*)\?.*/);
    document.location = match[1];
}


function displayError(message) {
    log(message);
    $("#error-text").text(message);
    $("#error-div").show();
}


function displayBusyMessage() {
    $("#query-executing-spinner").show();
}
function hideBusyMessage() {
    $("#query-executing-spinner").hide();
}


function log(msg) {
    $('#logmessage').append(msg);
}
